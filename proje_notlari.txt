updateGraphWithNeighbors fonksiyonu
Positioning Nodes (Düğüm Yerleşimi): Şu an, komşu düğümlerin yerleri Math.random() ile rastgele belirleniyor. 
Bu, başlangıçta iyi çalışabilir, ancak düğüm sayısı arttıkça daha karışık hale gelebilir. 
Düğümleri düzgün bir şekilde yerleştirmek için Force-Directed Layout gibi bir algoritma kullanabilirsiniz. 
Bu tür algoritmalar, düğümleri yerleştirirken doğal bir düzen sağlar.



4. Ağırlıklı Kenarları Görselleştirme
highlightShortestPath fonksiyonu, sadece kenarları işaretliyor ancak kenarların ağırlıklarını da görselleştirmek 
faydalı olabilir. Bu, kullanıcıların yolların maliyetlerini daha iyi anlamasına yardımcı olur.
Öneri:
Kenarların ağırlıklarını, kenarların üzerlerinde yazılı olarak gösterebilirsiniz. ctx.fillText() ile kenarın 
ağırlığını kenarın tam ortasına veya biraz daha üstüne yazabilirsiniz.




proje/
│
├── backend/                # Python ile backend kodları
│   ├── app.py              # Flask API'si
│   ├── graph.py            # Graf yapısı ve algoritmalar
│   ├── data_processing.py  # Veri seti okuma ve işleme
│   ├── requirements.txt    # Python bağımlılıkları
│
├── frontend/               # HTML ve JavaScript ile frontend kodları
│   ├── index.html          # Ana sayfa
│   ├── scripts/            
│   │   ├── graph.js        # Graf görselleştirmesi için JavaScript
│   │   ├── api.js          # API çağrıları için JavaScript
│
├── static/                 # Statik dosyalar
│   ├── css/
│   │   └── style.css       # (Opsiyonel: CSS dosyaları buraya eklenebilir)
│   ├── images/             # Grafikte kullanılacak görseller (varsa)
│
└── README.md               # Proje açıklamaları



file:///C:/Users/Dell/Desktop/Prolab-3/frontend/index.html
python -m http.server 8000